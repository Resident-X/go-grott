version: '3'

vars:
  BINARY_NAME: go-grott
  BUILD_DIR: ./build
  CMD_DIR: ./cmd
  COVERAGE_DIR: ./coverage

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list
    silent: true

  # Development tasks
  dev:
    desc: Run in development mode with hot reload
    deps: [ build ]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} -config config.yaml"
    silent: false

  build:
    desc: Build the application
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags="-s -w -X main.Version=$(git rev-parse --short HEAD)" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} -v {{.CMD_DIR}}
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    silent: false

  build-release:
    desc: Build optimized release binary
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - CGO_ENABLED=0 go build -ldflags="-s -w -X main.version={{.VERSION}}" -a -installsuffix cgo -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.CMD_DIR}}
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
    silent: false

  run:
    desc: Run the application
    deps: [ build ]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    silent: false

  run-with-config:
    desc: Run with custom config
    deps: [ build ]
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} -config {{.CONFIG}}"
    silent: false
    vars:
      CONFIG:
        sh: echo "${CONFIG:-./config.yaml}"

  # Testing tasks
  test:
    desc: Run all unit tests
    deps: [ mocks-clean ]
    cmds:
      - go test -v -race ./...
    silent: false

  test-unit:
    desc: Run unit tests only (excludes integration and e2e tests)
    deps: [ mocks-clean ]
    cmds:
      - go test -v -race -short ./...
    silent: false

  test-integration:
    desc: Run integration tests
    deps: [ mocks-clean ]
    cmds:
      - go test -v -race ./internal/api/...
    silent: false

  test-e2e:
    desc: Run end-to-end tests
    deps: [ mocks-clean, build ]
    cmds:
      - go test -v -race ./test/...
    silent: false

  test-all:
    desc: Run all tests including unit, integration, and e2e
    deps: [ mocks-clean, build ]
    cmds:
      - echo "Running unit tests..."
      - go test -v -race -short ./...
      - echo "Running integration tests..."
      - go test -v -race ./internal/api/...
      - echo "Running end-to-end tests..."
      - go test -v -race ./test/...
    silent: false

  test-coverage:
    desc: Run tests with coverage (excludes mocks)
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -v -race -coverprofile={{.COVERAGE_DIR}}/coverage.out $(go list ./... | grep -v /mocks)
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
      - go tool cover -func={{.COVERAGE_DIR}}/coverage.out
      - echo "Coverage report generated at {{.COVERAGE_DIR}}/coverage.html"
    silent: false

  coverage:
    desc: Run tests with coverage analysis (excludes mocks)
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -coverprofile={{.COVERAGE_DIR}}/coverage.out $(go list ./... | grep -v /mocks)
      - go tool cover -func={{.COVERAGE_DIR}}/coverage.out
    silent: false

  coverage-html:
    desc: Generate HTML coverage report (excludes mocks)
    deps: [ coverage ]
    cmds:
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
      - echo "Coverage report generated at {{.COVERAGE_DIR}}/coverage.html"
    silent: false

  test-parser:
    desc: Run only parser tests
    cmds:
      - go test -v -race ./internal/parser/...
    silent: false

  test-performance:
    desc: Run performance benchmarks
    cmds:
      - go test -bench=. -benchmem -benchtime=10s ./...
    silent: false

  benchmark:
    desc: Run benchmarks
    cmds:
      - go test -bench=. -benchmem ./...
    silent: false

  # Code quality tasks
  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...
    silent: false

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...
    silent: false

  lint:
    desc: Run golangci-lint (requires golangci-lint to be installed)
    cmds:
      - golangci-lint run
    silent: false

  lint-fix:
    desc: Run golangci-lint with auto-fix for safe issues
    cmds:
      - golangci-lint run --fix
    silent: false

  lint-critical:
    desc: Run golangci-lint focusing on critical issues only
    cmds:
      - golangci-lint run --enable-only=errcheck,gosec,nilerr,nilnil
    silent: false

  lint-complexity:
    desc: Run golangci-lint focusing on complexity issues
    cmds:
      - golangci-lint run --enable-only=gocyclo,gocognit,funlen
    silent: false

  check:
    desc: Run all code quality checks
    deps: [ fmt, vet, test ]
    cmds:
      - echo "All checks passed!"
    silent: false

  ci:
    desc: Run full CI pipeline (format, lint, test, build)
    deps: [ fmt, vet ]
    cmds:
      - echo "Running full CI pipeline..."
      - task: mocks-clean
      - task: test-unit
      - task: test-integration
      - task: build
      - task: test-e2e
      - echo "CI pipeline completed successfully!"
    silent: false

  ci-quick:
    desc: Run quick CI checks (format, vet, unit tests)
    deps: [ fmt, vet ]
    cmds:
      - echo "Running quick CI checks..."
      - task: test-unit
      - echo "Quick CI checks completed!"
    silent: false

  # Mock generation
  mocks:
    desc: Generate mocks using mockery
    cmds:
      - mockery
    silent: false

  mocks-clean:
    desc: Clean and regenerate all mocks
    cmds:
      - rm -rf ./mocks
      - mockery
    silent: false

  # Dependency management
  deps:
    desc: Download dependencies
    cmds:
      - go mod download
      - go mod verify
    silent: false

  deps-check:
    desc: Check for available dependency updates
    cmds:
      - echo "Checking for available dependency updates..."
      - go list -m -u all
    silent: false

  deps-analyze:
    desc: Analyze why dependencies are held back from updating
    cmds:
      - echo "Analyzing dependency constraints..."
      - |
        echo "Dependencies with available updates:"
        go list -m -u all | grep '\[' | while read line; do
          dep=$(echo "$line" | awk '{print $1}')
          current=$(echo "$line" | awk '{print $2}')
          available=$(echo "$line" | awk '{print $3}' | tr -d '[]')
          echo "  $dep: $current ‚Üí $available"
          echo "    Required by:"
          go mod graph | grep "$dep@" | awk '{print "      " $1}' | sort -u
          echo ""
        done
    silent: false

  deps-update:
    desc: Update all dependencies to latest versions
    cmds:
      - echo "Updating all dependencies..."
      - go get -u all
      - go mod tidy
      - echo "Dependencies updated successfully!"
    silent: false

  deps-update-minor:
    desc: Update dependencies to latest minor versions only (safer)
    cmds:
      - echo "Updating dependencies to latest minor versions..."
      - go get -u=patch all
      - go mod tidy
      - echo "Minor dependency updates completed!"
    silent: false

  deps-update-specific:
    desc: "Update specific dependency (usage: task deps-update-specific -- github.com/example/pkg)"
    cmds:
      - go get -u {{.CLI_ARGS}}
      - go mod tidy
      - echo "Updated {{.CLI_ARGS}}"
    silent: false

  deps-vendor:
    desc: Vendor dependencies
    cmds:
      - go mod vendor
    silent: false

  deps-audit:
    desc: Audit dependencies for known vulnerabilities
    cmds:
      - echo "Auditing dependencies for vulnerabilities..."
      - go list -json -deps ./... | nancy sleuth
    silent: false
    ignore_error: true

  deps-update-safe:
    desc: SAFE dependency update (patch versions only - recommended for production)
    cmds:
      - echo "üîí Performing SAFE dependency update (patch versions only)..."
      - echo "This only updates bug fixes, no feature changes or breaking changes"
      - go get -u=patch all
      - go mod tidy
      - echo "‚úÖ Safe updates completed!"
      - echo "Run 'task test' to verify everything still works"
    silent: false

  deps-update-with-tests:
    desc: Update dependencies and automatically run tests to verify compatibility
    cmds:
      - echo "üß™ Updating dependencies with test verification..."
      - go get -u all
      - go mod tidy
      - echo "Dependencies updated, running tests..."
      - task: test-unit
      - echo "‚úÖ Dependencies updated and tests passed!"
    silent: false

  deps-why-not-updated:
    desc: Explain why specific dependencies can't be updated
    cmds:
      - echo "üîç Analyzing why some dependencies aren't updating..."
      - echo "Indirect dependencies that can't be updated:"
      - |
        go list -m -u all | grep '\[' | while read line; do
          dep=$(echo "$line" | awk '{print $1}')
          echo "‚ùå $dep is constrained by:"
          go mod why "$dep" | head -3
          echo ""
        done
    silent: false

  # Cleanup tasks
  clean:
    desc: Clean build artifacts and caches
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -rf {{.COVERAGE_DIR}}
      - go clean -cache -testcache -modcache
    silent: false

  clean-build:
    desc: Clean only build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
    silent: false

  # Docker tasks (optional)
  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.BINARY_NAME}}:latest .
    silent: false

  # Install tasks
  install:
    desc: Install the binary to GOPATH/bin
    cmds:
      - go install {{.CMD_DIR}}
    silent: false
