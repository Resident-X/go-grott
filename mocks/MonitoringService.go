// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/resident-x/go-grott/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockMonitoringService is an autogenerated mock type for the MonitoringService type
type MockMonitoringService struct {
	mock.Mock
}

type MockMonitoringService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitoringService) EXPECT() *MockMonitoringService_Expecter {
	return &MockMonitoringService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockMonitoringService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMonitoringService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMonitoringService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMonitoringService_Expecter) Close() *MockMonitoringService_Close_Call {
	return &MockMonitoringService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMonitoringService_Close_Call) Run(run func()) *MockMonitoringService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonitoringService_Close_Call) Return(_a0 error) *MockMonitoringService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitoringService_Close_Call) RunAndReturn(run func() error) *MockMonitoringService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with no fields
func (_m *MockMonitoringService) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMonitoringService_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockMonitoringService_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockMonitoringService_Expecter) Connect() *MockMonitoringService_Connect_Call {
	return &MockMonitoringService_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockMonitoringService_Connect_Call) Run(run func()) *MockMonitoringService_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonitoringService_Connect_Call) Return(_a0 error) *MockMonitoringService_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitoringService_Connect_Call) RunAndReturn(run func() error) *MockMonitoringService_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, data
func (_m *MockMonitoringService) Send(ctx context.Context, data *domain.InverterData) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.InverterData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMonitoringService_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMonitoringService_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - data *domain.InverterData
func (_e *MockMonitoringService_Expecter) Send(ctx interface{}, data interface{}) *MockMonitoringService_Send_Call {
	return &MockMonitoringService_Send_Call{Call: _e.mock.On("Send", ctx, data)}
}

func (_c *MockMonitoringService_Send_Call) Run(run func(ctx context.Context, data *domain.InverterData)) *MockMonitoringService_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.InverterData))
	})
	return _c
}

func (_c *MockMonitoringService_Send_Call) Return(_a0 error) *MockMonitoringService_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonitoringService_Send_Call) RunAndReturn(run func(context.Context, *domain.InverterData) error) *MockMonitoringService_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonitoringService creates a new instance of MockMonitoringService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonitoringService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonitoringService {
	mock := &MockMonitoringService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
