// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMessagePublisher is an autogenerated mock type for the MessagePublisher type
type MockMessagePublisher struct {
	mock.Mock
}

type MockMessagePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessagePublisher) EXPECT() *MockMessagePublisher_Expecter {
	return &MockMessagePublisher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockMessagePublisher) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessagePublisher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMessagePublisher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMessagePublisher_Expecter) Close() *MockMessagePublisher_Close_Call {
	return &MockMessagePublisher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMessagePublisher_Close_Call) Run(run func()) *MockMessagePublisher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessagePublisher_Close_Call) Return(_a0 error) *MockMessagePublisher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessagePublisher_Close_Call) RunAndReturn(run func() error) *MockMessagePublisher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields: ctx
func (_m *MockMessagePublisher) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessagePublisher_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockMessagePublisher_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessagePublisher_Expecter) Connect(ctx interface{}) *MockMessagePublisher_Connect_Call {
	return &MockMessagePublisher_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockMessagePublisher_Connect_Call) Run(run func(ctx context.Context)) *MockMessagePublisher_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessagePublisher_Connect_Call) Return(_a0 error) *MockMessagePublisher_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessagePublisher_Connect_Call) RunAndReturn(run func(context.Context) error) *MockMessagePublisher_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, data
func (_m *MockMessagePublisher) Publish(ctx context.Context, topic string, data interface{}) error {
	ret := _m.Called(ctx, topic, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessagePublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessagePublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - data interface{}
func (_e *MockMessagePublisher_Expecter) Publish(ctx interface{}, topic interface{}, data interface{}) *MockMessagePublisher_Publish_Call {
	return &MockMessagePublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, data)}
}

func (_c *MockMessagePublisher_Publish_Call) Run(run func(ctx context.Context, topic string, data interface{})) *MockMessagePublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockMessagePublisher_Publish_Call) Return(_a0 error) *MockMessagePublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessagePublisher_Publish_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockMessagePublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessagePublisher creates a new instance of MockMessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessagePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessagePublisher {
	mock := &MockMessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
