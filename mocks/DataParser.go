// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/resident-x/go-grott/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockDataParser is an autogenerated mock type for the DataParser type
type MockDataParser struct {
	mock.Mock
}

type MockDataParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataParser) EXPECT() *MockDataParser_Expecter {
	return &MockDataParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: ctx, data
func (_m *MockDataParser) Parse(ctx context.Context, data []byte) (*domain.InverterData, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *domain.InverterData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*domain.InverterData, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *domain.InverterData); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.InverterData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockDataParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
func (_e *MockDataParser_Expecter) Parse(ctx interface{}, data interface{}) *MockDataParser_Parse_Call {
	return &MockDataParser_Parse_Call{Call: _e.mock.On("Parse", ctx, data)}
}

func (_c *MockDataParser_Parse_Call) Run(run func(ctx context.Context, data []byte)) *MockDataParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockDataParser_Parse_Call) Return(_a0 *domain.InverterData, _a1 error) *MockDataParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataParser_Parse_Call) RunAndReturn(run func(context.Context, []byte) (*domain.InverterData, error)) *MockDataParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: data
func (_m *MockDataParser) Validate(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataParser_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockDataParser_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - data []byte
func (_e *MockDataParser_Expecter) Validate(data interface{}) *MockDataParser_Validate_Call {
	return &MockDataParser_Validate_Call{Call: _e.mock.On("Validate", data)}
}

func (_c *MockDataParser_Validate_Call) Run(run func(data []byte)) *MockDataParser_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockDataParser_Validate_Call) Return(_a0 error) *MockDataParser_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataParser_Validate_Call) RunAndReturn(run func([]byte) error) *MockDataParser_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataParser creates a new instance of MockDataParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataParser {
	mock := &MockDataParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
