// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/resident-x/go-grott/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// GetAllDataloggers provides a mock function with no fields
func (_m *MockRegistry) GetAllDataloggers() []*domain.DataloggerInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllDataloggers")
	}

	var r0 []*domain.DataloggerInfo
	if rf, ok := ret.Get(0).(func() []*domain.DataloggerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DataloggerInfo)
		}
	}

	return r0
}

// MockRegistry_GetAllDataloggers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDataloggers'
type MockRegistry_GetAllDataloggers_Call struct {
	*mock.Call
}

// GetAllDataloggers is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) GetAllDataloggers() *MockRegistry_GetAllDataloggers_Call {
	return &MockRegistry_GetAllDataloggers_Call{Call: _e.mock.On("GetAllDataloggers")}
}

func (_c *MockRegistry_GetAllDataloggers_Call) Run(run func()) *MockRegistry_GetAllDataloggers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_GetAllDataloggers_Call) Return(_a0 []*domain.DataloggerInfo) *MockRegistry_GetAllDataloggers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_GetAllDataloggers_Call) RunAndReturn(run func() []*domain.DataloggerInfo) *MockRegistry_GetAllDataloggers_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatalogger provides a mock function with given fields: id
func (_m *MockRegistry) GetDatalogger(id string) (*domain.DataloggerInfo, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDatalogger")
	}

	var r0 *domain.DataloggerInfo
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*domain.DataloggerInfo, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.DataloggerInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DataloggerInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockRegistry_GetDatalogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatalogger'
type MockRegistry_GetDatalogger_Call struct {
	*mock.Call
}

// GetDatalogger is a helper method to define mock.On call
//   - id string
func (_e *MockRegistry_Expecter) GetDatalogger(id interface{}) *MockRegistry_GetDatalogger_Call {
	return &MockRegistry_GetDatalogger_Call{Call: _e.mock.On("GetDatalogger", id)}
}

func (_c *MockRegistry_GetDatalogger_Call) Run(run func(id string)) *MockRegistry_GetDatalogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_GetDatalogger_Call) Return(_a0 *domain.DataloggerInfo, _a1 bool) *MockRegistry_GetDatalogger_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_GetDatalogger_Call) RunAndReturn(run func(string) (*domain.DataloggerInfo, bool)) *MockRegistry_GetDatalogger_Call {
	_c.Call.Return(run)
	return _c
}

// GetInverters provides a mock function with given fields: dataloggerID
func (_m *MockRegistry) GetInverters(dataloggerID string) ([]*domain.InverterInfo, bool) {
	ret := _m.Called(dataloggerID)

	if len(ret) == 0 {
		panic("no return value specified for GetInverters")
	}

	var r0 []*domain.InverterInfo
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]*domain.InverterInfo, bool)); ok {
		return rf(dataloggerID)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.InverterInfo); ok {
		r0 = rf(dataloggerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.InverterInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(dataloggerID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockRegistry_GetInverters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInverters'
type MockRegistry_GetInverters_Call struct {
	*mock.Call
}

// GetInverters is a helper method to define mock.On call
//   - dataloggerID string
func (_e *MockRegistry_Expecter) GetInverters(dataloggerID interface{}) *MockRegistry_GetInverters_Call {
	return &MockRegistry_GetInverters_Call{Call: _e.mock.On("GetInverters", dataloggerID)}
}

func (_c *MockRegistry_GetInverters_Call) Run(run func(dataloggerID string)) *MockRegistry_GetInverters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_GetInverters_Call) Return(_a0 []*domain.InverterInfo, _a1 bool) *MockRegistry_GetInverters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_GetInverters_Call) RunAndReturn(run func(string) ([]*domain.InverterInfo, bool)) *MockRegistry_GetInverters_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterDatalogger provides a mock function with given fields: id, ip, port, protocol
func (_m *MockRegistry) RegisterDatalogger(id string, ip string, port int, protocol string) error {
	ret := _m.Called(id, ip, port, protocol)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDatalogger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, string) error); ok {
		r0 = rf(id, ip, port, protocol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_RegisterDatalogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDatalogger'
type MockRegistry_RegisterDatalogger_Call struct {
	*mock.Call
}

// RegisterDatalogger is a helper method to define mock.On call
//   - id string
//   - ip string
//   - port int
//   - protocol string
func (_e *MockRegistry_Expecter) RegisterDatalogger(id interface{}, ip interface{}, port interface{}, protocol interface{}) *MockRegistry_RegisterDatalogger_Call {
	return &MockRegistry_RegisterDatalogger_Call{Call: _e.mock.On("RegisterDatalogger", id, ip, port, protocol)}
}

func (_c *MockRegistry_RegisterDatalogger_Call) Run(run func(id string, ip string, port int, protocol string)) *MockRegistry_RegisterDatalogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockRegistry_RegisterDatalogger_Call) Return(_a0 error) *MockRegistry_RegisterDatalogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_RegisterDatalogger_Call) RunAndReturn(run func(string, string, int, string) error) *MockRegistry_RegisterDatalogger_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterInverter provides a mock function with given fields: dataloggerID, inverterSerial, inverterNo
func (_m *MockRegistry) RegisterInverter(dataloggerID string, inverterSerial string, inverterNo string) error {
	ret := _m.Called(dataloggerID, inverterSerial, inverterNo)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInverter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dataloggerID, inverterSerial, inverterNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_RegisterInverter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterInverter'
type MockRegistry_RegisterInverter_Call struct {
	*mock.Call
}

// RegisterInverter is a helper method to define mock.On call
//   - dataloggerID string
//   - inverterSerial string
//   - inverterNo string
func (_e *MockRegistry_Expecter) RegisterInverter(dataloggerID interface{}, inverterSerial interface{}, inverterNo interface{}) *MockRegistry_RegisterInverter_Call {
	return &MockRegistry_RegisterInverter_Call{Call: _e.mock.On("RegisterInverter", dataloggerID, inverterSerial, inverterNo)}
}

func (_c *MockRegistry_RegisterInverter_Call) Run(run func(dataloggerID string, inverterSerial string, inverterNo string)) *MockRegistry_RegisterInverter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRegistry_RegisterInverter_Call) Return(_a0 error) *MockRegistry_RegisterInverter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_RegisterInverter_Call) RunAndReturn(run func(string, string, string) error) *MockRegistry_RegisterInverter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
